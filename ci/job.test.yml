parameters:
  platforms:
    - name: Linux
      vmImage: ubuntu-16.04
      activate: source activate base
    - name: MacOSX
      vmImage: macos-10.14
      activate: source activate base
    - name: Windows
      vmImage: vs2017-win2016
      activate: call activate base
  pythons:
    - name: ThreeSix
      spec: '=3.6'
      lab: '>=2.2.0,<3.0.0a0'
      nodejs: '>=10,<11.0.0.a0'
    - name: ThreeSeven
      spec: '=3.7'
      lab: '>=2.2.0,<3.0.0a0'
      nodejs: '>=12,<13.0.0a0'
    - name: ThreeEight
      spec: '=3.8'
      lab: '>=2.2.0,<3.0.0a0'
      nodejs: '>=13,<14.0.0a0'
  js_cov_packages:
    - jupyterlab-go-to-definition
    - jupyterlab-lsp
  env_update: conda env update -n base --file env-test.yml --quiet
  lab_link: jupyter labextension link --debug --no-build $(LINKED_EXTENSIONS)
  lab_ext: jupyter labextension install --debug --no-build $(FIRST_PARTY_LABEXTENSIONS)
  lab_build: jupyter lab build --debug --dev-build=False --minimize=True

jobs:
  - ${{ each platform in parameters.platforms }}:
      - ${{ each python in parameters.pythons}}:
          - ${{ platform.name }}${{ python.name }}:
            runs-on: ${{ platform.vmImage }}
            steps:
              - uses: actions/checkout@v2
              #- name: Use Node.js ${{ python.nodejs }}
              #  uses: actions/setup-node@v1
              #  with:
              #    node-version: ${{ python.nodejs }}

              - name: Set up Python and conda
                uses: s-weigand/setup-conda@v1
                with:
                  update-conda: false
                  python-version: ${{ python.spec }}
                  conda-channels: anaconda, conda-forge

              - run: conda --version
              - run: which python

              - name: generate env with lab and node version
                run: ${{ platform.activate }} && cd ci && python env_template.py "${{ python.lab }}" "{{ python.nodejs }}"

              - name: update conda environment with test dependencies
                run: ${{ parameters.env_update }} || ${{ parameters.env_update }} || ${{ parameters.env_update }}

              - run: conda info && conda list -n base
                name: list conda info and packages

              - run: ${{ platform.activate }} && jlpm || jlpm || jlpm
                name: install npm dependencies

              - run: ${{ platform.activate }} && jlpm build
                name: build typerun

              - run: ${{ platform.activate }} && python setup.py sdist bdist_wheel
                name: build python distributions

              - run: ${{ platform.activate }} && jlpm lerna run bundle
                name: build npm bundles

              - run: ${{ platform.activate }} && cd dist && python -m pip install jupyter_lsp-$(PY_JLSP_VERSION)-py3-none-any.whl --no-deps
                name: install python wheel

              - run: ${{ platform.activate }} && python scripts/jedi_cache.py
                name: warm up jedi cache

              - run: ${{ platform.activate }} && python scripts/tectonic_cache.py
                name: warm up tectonic cache

              - run: ${{ platform.activate }} && jlpm test
                name: run frontend unit tests

              #- task: PublishTestResults@2
              #  name: publish frontend test results
              #  inputs:
              #    testResultsFiles: packages/**/junit.xml
              #    testRunTitle: 'Jest ${{ platform.name }}${{ python.name }}'
              #    mergeTestResults: true
              #  condition: always()

              #- ${{ each js_package in parameters.js_cov_packages }}:
              #    - task: PublishCodeCoverageResults@1
              #      name: 'publish ${{ js_package }} coverage'
              #      inputs:
              #        codeCoverageTool: Cobertura
              #        summaryFileLocation: 'packages/${{ js_package }}/coverage/cobertura-coverage.xml'
              #      condition: always()

              - run: ${{ platform.activate }} && jupyter serverextension list
                name: list server extensions

              - run: ${{ platform.activate }} && python scripts/utest.py --test-run-title="Pytest ${{ platform.name }}${{ python.name }}"
                name: run python tests

              - run: ${{ platform.activate }} && ${{ parameters.lab_link }} || ${{ parameters.lab_link }} || ${{ parameters.lab_link }}
                name: install support packages

              - run: ${{ platform.activate }} && ${{ parameters.lab_ext }} || ${{ parameters.lab_ext }} || ${{ parameters.lab_ext }}
                name: install labextensions

              - run: ${{ platform.activate }} && jupyter labextension list
                name: list labextensions before build

              - run: ${{ platform.activate }} && ${{ parameters.lab_build }} || ${{ parameters.lab_build }} || ${{ parameters.lab_build }}
                name: build lab

              - run: ${{ platform.activate }} && jupyter labextension list
                name: list labextensions after build

              - run: ${{ platform.activate }} && python scripts/atest.py --exclude expect:fail
                name: run browser tests

              #- task: PublishTestResults@2
              #  name: publish browser test results
              #  inputs:
              #    testResultsFiles: atest/output/*.xunit.xml
              #    testRunTitle: 'Robot ${{ platform.name }}${{ python.name }}'
              #    mergeTestResults: true
              #  condition: always()

              #- task: PublishPipelineArtifact@0
              #  name: publish browser test output
              #  inputs:
              #    targetPath: atest/output
              #    artifactName: $(Agent.JobStatus) Robot ${{ platform.name }}${{ python.name }} $(Build.BuildId)
              #  condition: always()
